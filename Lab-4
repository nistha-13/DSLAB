//1
#include <iostream>
using namespace std;

int main() {
    double a;
    int n;
    double result = 1;

    cout << "Enter base (a): ";
    cin >> a;

    cout << "Enter exponent (n): ";
    cin >> n;

    int abs_n = n >= 0 ? n : -n;

    for (int i = 0; i < abs_n; ++i) {
        result *= a;
    }

    if (n < 0) {
        result = 1 / result;
    }

    cout << a << "^" << n << " = " << result << endl;

    return 0;
}
//2
#include <iostream>
using namespace std;

long long powerMod(long long b, long long n, long long m) {
    long long result = 1;
    b = b % m; 

    while (n > 0) {
        if (n % 2 == 1) {
            result = (result * b) % m;
        }
        b = (b * b) % m;
        n = n / 2;
    }

    return result;
}

int main() {
    long long b, n, m;
    
    cout << "Enter base (b): ";
    cin >> b;
    
    cout << "Enter exponent (n): ";
    cin >> n;
    
    cout << "Enter modulus (m): ";
    cin >> m;

    cout << "Result: " << powerMod(b, n, m) << endl;

    return 0;
}
//3
#include <iostream>
using namespace std;

int fibonacci(int n) {
    if (n <= 1)
        return n;
    return fibonacci(n - 1) + fibonacci(n - 2);
}

int main() {
    int terms;

    cout << "Enter the number of terms: ";
    cin >> terms;

    cout << "Fibonacci Series: ";
    for (int i = 0; i < terms; ++i) {
        cout << fibonacci(i) << " ";
    }
    cout << endl;

    return 0;
}
//4
#include <iostream>
using namespace std;

void insertionSort(int arr[], int n) {
    for (int i = 1; i < n; i++) {
        int key = arr[i];
        int j = i - 1;

        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j--;
        }

        arr[j + 1] = key;
    }
}

int main() {
    int arr[100], n;

    cout << "Enter number of elements: ";
    cin >> n;

    cout << "Enter array elements: ";
    for (int i = 0; i < n; i++)
        cin >> arr[i];

    insertionSort(arr, n);

    cout << "Sorted array: ";
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
    cout << endl;

    return 0;
}
/5
#include <iostream>
using namespace std;
void merge(int arr[], int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

   
    int L[n1], R[n2];


    for (int i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[mid + 1 + j];

   
    int i = 0, j = 0, k = left;

    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k++] = L[i++];
        } else {
            arr[k++] = R[j++];
        }
    }

    
    while (i < n1)
        arr[k++] = L[i++];

    while (j < n2)
        arr[k++] = R[j++];
}

void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}

int main() {
    int arr[100], n;

    cout << "Enter number of elements: ";
    cin >> n;

    cout << "Enter array elements: ";
    for (int i = 0; i < n; i++)
        cin >> arr[i];

    mergeSort(arr, 0, n - 1);

    cout << "Sorted array: ";
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
    cout << endl;

    return 0;
}
//6
#include <iostream>
using namespace std;

int linearSearch(int arr[], int n, int target) {
    for (int i = 0; i < n; i++) {
        if (arr[i] == target)
            return i; 
    }
    return -1; 
}

int main() {
    int arr[100], n, target;

    cout << "Enter number of elements: ";
    cin >> n;

    cout << "Enter array elements: ";
    for (int i = 0; i < n; i++)
        cin >> arr[i];

    cout << "Enter number to search: ";
    cin >> target;

    int index = linearSearch(arr, n, target);

    if (index != -1)
        cout << "Number found at index " << index << endl;
    else
        cout << "Number not found in the array." << endl;

    return 0;
}
 //7 
#include <iostream>
using namespace std;

int binarySearch(int arr[], int n, int target) {
    int left = 0, right = n - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2;

        if (arr[mid] == target)
            return mid; 
        else if (arr[mid] < target)
            left = mid + 1; 
        else
            right = mid - 1;
    }

    return -1; 
}

int main() {
    int arr[100], n, target;

    cout << "Enter number of elements: ";
    cin >> n;

    cout << "Enter " << n << " elements (in sorted order): ";
    for (int i = 0; i < n; i++)
        cin >> arr[i];

    cout << "Enter number to search: ";
    cin >> target;

    int index = binarySearch(arr, n, target);

    if (index != -1)
        cout << "Number found at index " << index << endl;
    else
        cout << "Number not found in the array." << endl;

    return 0;
}
