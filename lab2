/1
#include <iostream>
using namespace std;


int euclideanGCD(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}


int extendedGCD(int a, int b, int &x, int &y) {
    if (b == 0) {
        x = 1;  // Base case: gcd(a, 0) = a
        y = 0;
        return a;
    }
    int x1, y1;
    int gcd = extendedGCD(b, a % b, x1, y1);

    x = y1;
    y = x1 - (a / b) * y1;

    return gcd;
}

int main() {
    int a, b;
    cout << "Enter two integers a and b: ";
    cin >> a >> b;

    
    int gcd = euclideanGCD(a, b);
    cout << "\nEuclidean GCD of " << a << " and " << b << " is: " << gcd << endl;

  
    int x, y;
    int extGCD = extendedGCD(a, b, x, y);
    cout << "Extended Euclidean Result:\n";
    cout << "gcd(" << a << ", " << b << ") = " << extGCD << " = "
         << a << "*" << x << " + " << b << "*" << y << endl;

    return 0;
}
//2
#include <iostream>
using namespace std;

int binaryAdd(int a, int b) {
    while (b != 0) {
        int carry = a & b;      
        a = a ^ b;              
        b = carry << 1;        
    }
    return a;
}


int binaryMultiply(int a, int b) {
    int result = 0;
    bool negative = false;

   
    if (a < 0) {
        a = -a;
        negative = !negative;
    }
    if (b < 0) {
        b = -b;
        negative = !negative;
    }

    while (b > 0) {
        if (b & 1) {
            result = binaryAdd(result, a);
        }
        a <<= 1; 
        b >>= 1; 
    }

    return negative ? -result : result;
}

int main() {
    int a, b;
    cout << "Enter two integers: ";
    cin >> a >> b;

    int sum = binaryAdd(a, b);
    int product = binaryMultiply(a, b);

    cout << "\nBinary Addition of " << a << " + " << b << " = " << sum << endl;
    cout << "Binary Multiplication of " << a << " * " << b << " = " << product << endl;

    return 0;
}
//3
#include <iostream>
using namespace std;

const int MAX = 10;

// Function to input a matrix
void inputMatrix(int mat[MAX][MAX], int n, const string& name) {
    cout << "Enter elements of matrix " << name << " (" << n << "x" << n << ", only 0s and 1s):\n";
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < n; ++j)
            cin >> mat[i][j];
}

// Function to display a matrix
void printMatrix(int mat[MAX][MAX], int n, const string& name) {
    cout << "\nMatrix " << name << ":\n";
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j)
            cout << mat[i][j] << " ";
        cout << endl;
    }
}

// Boolean Join (OR)
void joinMatrix(int A[MAX][MAX], int B[MAX][MAX], int C[MAX][MAX], int n) {
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < n; ++j)
            C[i][j] = A[i][j] | B[i][j];
}

// Boolean Meet (AND)
void meetMatrix(int A[MAX][MAX], int B[MAX][MAX], int C[MAX][MAX], int n) {
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < n; ++j)
            C[i][j] = A[i][j] & B[i][j];
}

// Boolean Product
void booleanProduct(int A[MAX][MAX], int B[MAX][MAX], int C[MAX][MAX], int n) {
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < n; ++j) {
            C[i][j] = 0;
            for (int k = 0; k < n; ++k)
                C[i][j] = C[i][j] | (A[i][k] & B[k][j]);
        }
}

int main() {
    int A[MAX][MAX], B[MAX][MAX], C[MAX][MAX];
    int n;

    cout << "Enter the size of the square matrices (max " << MAX << "): ";
    cin >> n;

    inputMatrix(A, n, "A");
    inputMatrix(B, n, "B");

    // Boolean Join
    joinMatrix(A, B, C, n);
    printMatrix(C, n, "A ∨ B (Join)");

    // Boolean Meet
    meetMatrix(A, B, C, n);
    printMatrix(C, n, "A ∧ B (Meet)");

    // Boolean Product
    booleanProduct(A, B, C, n);
    printMatrix(C, n, "A · B (Boolean Product)");

    return 0;
}
//4
#include <iostream>
using namespace std;

void primeFactors(int n) {
    if (n <= 1) {
        cout << "No prime factors for numbers less than 2." << endl;
        return;
    }

    cout << "Prime factors of " << n << " are: ";

  
    while (n % 2 == 0) {
        cout << 2 << " ";
        n /= 2;
    }

    for (int i = 3; i * i <= n; i += 2) {
        while (n % i == 0) {
            cout << i << " ";
            n /= i;
        }
    }

    if (n > 2)
        cout << n;

    cout << endl;
}

int main() {
    int num;
    cout << "Enter a number: ";
    cin >> num;

    primeFactors(num);

    return 0;
}
//5
#include <iostream>
#include <vector>
using namespace std;


int extendedGCD(int a, int b, int &x, int &y) {
    if (b == 0) {
        x = 1; y = 0;
        return a;
    }
    int x1, y1;
    int gcd = extendedGCD(b, a % b, x1, y1);
    x = y1;
    y = x1 - (a / b) * y1;
    return gcd;
}


void solveLinearCongruence(int a, int b, int m) {
    int x, y;
    int g = extendedGCD(a, m, x, y);

    if (b % g != 0) {
        cout << "No solution exists.\n";
        return;
    }

 
    int x0 = (x * (b / g)) % m;
    if (x0 < 0) x0 += m;

    cout << "Solution(s) to " << a << "x ≡ " << b << " (mod " << m << "):\n";

  
    for (int i = 0; i < g; ++i) {
        int sol = (x0 + i * (m / g)) % m;
        cout << "x ≡ " << sol << " (mod " << m << ")\n";
    }
}

int main() {
    int a, b, m;
    cout << "Enter values for a, b, and m in ax ≡ b (mod m): ";
    cin >> a >> b >> m;

    solveLinearCongruence(a, b, m);

    return 0;
}
//6
#include <iostream>
#include <vector>
using namespace std;

int extendedGCD(int a, int b, int &x, int &y) {
    if (b == 0) {
        x = 1; y = 0;
        return a;
    }
    int x1, y1;
    int gcd = extendedGCD(b, a % b, x1, y1);
    x = y1;
    y = x1 - (a / b) * y1;
    return gcd;
}

int modInverse(int a, int m) {
    int x, y;
    int g = extendedGCD(a, m, x, y);
    if (g != 1) return -1; // No inverse if gcd ≠ 1
    return (x % m + m) % m;
}

int chineseRemainderTheorem(vector<int> a, vector<int> m) {
    int n = a.size();
    long long M = 1;

    for (int i = 0; i < n; ++i)
        M *= m[i]; // Product of all moduli

    long long result = 0;

    for (int i = 0; i < n; ++i) {
        long long Mi = M / m[i];
        int inv = modInverse(Mi, m[i]);
        if (inv == -1) {
            cout << "Moduli are not pairwise coprime.\n";
            return -1;
        }
        result += (long long)a[i] * Mi * inv;
    }

    return result % M;
}

int main() {
    int n;
    cout << "Enter number of congruences: ";
    cin >> n;

    vector<int> a(n), m(n);
    cout << "Enter values of a[i] and m[i] for each congruence (x ≡ a[i] mod m[i]):\n";
    for (int i = 0; i < n; ++i) {
        cout << "a[" << i + 1 << "]: ";
        cin >> a[i];
        cout << "m[" << i + 1 << "]: ";
        cin >> m[i];
    }

    int result = chineseRemainderTheorem(a, m);

    if (result != -1)
        cout << "\nThe solution x ≡ " << result << " (mod " << 
            (long long)m[0] * m[1] * (n > 2 ? m[2] : 1) << ")\n";

    return 0;
}
